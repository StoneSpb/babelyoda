#!/usr/bin/env ruby

require 'rubygems'
require 'fileutils'
require 'plist'
require 'term/ansicolor'
require 'tmpdir'
require 'yaml'

include Term::ANSIColor

# Main block

def main
  banner
  check_args
  setup
  print_config
  make_tmp_lproj_dirs

  FileUtils.mkdir_p '.babelyoda', :verbose => true
  
  eval $config['action']

  # FileUtils.rm_rf $config['tmp_dir'], :verbose => true
  success "All done!"
end

# Aux methods

def banner
  puts "Babel Yoda v1.0"
  puts "Â© 2010 Andrey Subbotin <andrey@subbotin.me>"
end

def usage 
  puts ""
  puts "Usage: babelyoda <action> [<rules.babelyoda>]"
  puts ""
  puts "<action>          = push | pull"
  puts "<rules.babelyoda> = babel yoda config file, default is rules.babelyoda"   
end

def check_args 
  if (ARGV.length == 0)
    usage
    exit 1
  elsif (ARGV.length == 1)
    unless (ARGV[0] == 'push' || ARGV[0] == 'pull')
      usage
      exit 1
    end
  end
end

def setup
  $config = Hash.new
  global_config_filename = File.expand_path('~/.babelyoda')
  $config.merge!(YAML.load_file(global_config_filename)) if File.exist?(global_config_filename)
  config = YAML.load_file(ARGV[1].nil? ? 'rules.babelyoda' : ARGV[1])
  config['tmp_dir'] = File.join Dir.tmpdir, "epl.babelyoda.#{$$}"
  config['src_dir'] = File.join config['tmp_dir'], 'src'
  config['startwd'] = Dir.getwd
  config['action'] = ARGV[0]
  config['src_lang'] = Plist::parse_xml(config['plist'])['CFBundleDevelopmentRegion']
  config['src_lang_lproj'] = config['src_lang'] + '.lproj'
  config['src_lang_lproj_dir'] = File.join(config['target_dir'], config['src_lang_lproj'])
  config['src_lang_code_strings_file'] = File.join(config['src_lang_lproj_dir'], 'Localizable.strings')
  config['initial_strings_file'] = File.join(config['target_dir'], 'Localizable.strings')
  config['src_lang_xibs_lproj_dir'] = File.join(config['target_dir'], 'XIBs', "#{config['src_lang']}.lproj")
  $config.merge!(config)
  $config['products_folder'] = File.expand_path($config['products_folder'])
end

def print_config
  # Print out settings
  status "CONFIG"
  y $config
end

def exe(cmd)
  putcmd cmd
  system cmd
end

def putcmd(cmd)
  print magenta, "CMD: #{cmd}", reset, "\n"  
end

def status(msg)
  print blue, "--- #{msg} ---", reset, "\n"  
end

def error(msg)
  print red, bold, 'ERROR: ', msg, reset, "\n"
  exit 1
end

def success(msg)
  print green, bold, 'SUCCESS: ', msg, reset, "\n"
end

def escape_cmd_args(args)
  args.collect{ |arg| "'#{arg}'"}.join(' ')
end

# Globbers

def all_lproj_dirs
  (dst_lproj_dirs << src_lproj_dir).sort
end

def src_lproj_dir
  $config['src_lang_lproj_dir']
end

def dst_lproj_dirs
  $config['languages'].collect{ |l| 
    lproj_dir_for_lang(l) 
  }.sort
end

def lproj_dir_for_lang(lang)
  File.join($config['target_dir'], "#{lang}.lproj")
end

def tmp_lproj_dir_for_lang(lang)
  File.join($config['tmp_dir'], "#{lang}.lproj")
end

def src_code_files
  $config['code_dirs'].collect{ |dir|
    Dir.glob(File.join(dir, '**', '*.{c,h,m,hh,mm}'))
  }.flatten!.sort
end

def dst_code_strings_files
  $config['languages'].collect{ |l| 
    File.join(lproj_dir_for_lang(l), 'Localizable.strings')
  }.sort
end

def all_code_strings_files
  (dst_code_strings_files << $config['src_lang_code_strings_file']).sort
end

def src_xib_files
  $config['xib_dirs'].collect{ |dir| 
    Dir.glob(File.join(dir, '**', $config['src_lang_lproj'], '*.xib')) 
  }.flatten!.sort
end

# Processing

def push
  init_lproj_dirs
  gen_src_code_strings
  extract_untranslated_src_code_strings
  gen_src_xib_strings
  pack_tmp_lproj
  push_tmp_lproj
end

def pull
end

def make_tmp_lproj_dirs
  FileUtils.mkdir_p $config['languages'].sort.collect{ |lang| tmp_lproj_dir_for_lang(lang) }, :verbose => true
end

def init_lproj_dirs
  status "PREPARING LPROJ DIRECTORIES"
  if File.exists?($config['initial_strings_file']) && File.exists?($config['src_lang_code_strings_file'])
    error "Both '#{$config['initial_strings_file']}' and '#{$config['src_lang_code_strings_file']}' exist!"
  end
  FileUtils.mkdir_p all_lproj_dirs, :verbose => true
end

# generate .strings file into the temporary directory
# touch the target file so it's created if it didn't exist
# and then merge it with the new file, preserving any translations made
def gen_src_code_strings
  status "GENERATING STRINGS FILE FOR THE SOURCE LANGUAGE"
  genstrings src_code_files, $config['tmp_dir']
  tmp_strings_file = File.join($config['tmp_dir'], 'Localizable.strings')
  merge_strings_at_into tmp_strings_file, all_code_strings_files
end

def genstrings(files, output_path)
  files_safe = escape_cmd_args(files)
  rc = exe "genstrings -o '#{output_path}' #{files_safe}"
  error "Failed to generate strings" unless rc
end

def gen_src_xib_strings
  status "GENERATING STRINGS FILES FOR THE SOURCE LANGUAGE XIBS"
  src_xib_files.each do |xib|
    strings = xib.slice(0, xib.length - 4) + '.strings'
    rc = exe "ibtool --generate-strings-file '#{strings}' '#{xib}'"
    error "Failed to generate strings for file '#{xib}'" unless rc
  end
end

def merge_strings_at_into(src_strings, dst_strings)
  targets = dst_strings.is_a?(String) ? [dst_strings] : dst_strings
  targets.each do |target|
    status "MERGING STRINGS AT '#{src_strings}' INTO '#{target}'"
    FileUtils.touch target
    rc = exe "wincent-strings-util --base '#{src_strings}' --merge '#{target}' --output '#{target}'"
    error "Failed to merge '#{src_strings}' into '#{target}'" unless rc
  end
end

def extract_untranslated_src_code_strings
  tmp_strings_file = File.join($config['tmp_dir'], 'Localizable.strings')
  $config['languages'].sort.each do |lang| 
    src_file = File.join(lproj_dir_for_lang(lang), 'Localizable.strings')
    dst_file = File.join(tmp_lproj_dir_for_lang(lang), 'Localizable.strings')
    status "EXTRACTING UNTRANSLATED STRINGS FROM '#{src_file}' TO '#{dst_file}'"
    rc = exe "wincent-strings-util --base '#{tmp_strings_file}' --extract '#{src_file}' --output '#{dst_file}'"
    error "Failed to extract untranslated string from '#{src_file}' into '#{dst_file}' based on '#{tmp_strings_file}'" unless rc
  end
end

def pack_tmp_lproj
  FileUtils.mkdir_p File.join($config['tmp_dir'], 'zips'), :verbose => true
  $config['languages'].sort.each do |lang| 
    status "PACKING RESOURCES FOR '#{lang}'"    
    FileUtils.cd(tmp_lproj_dir_for_lang(lang), :verbose => true) do |dir|
      rc = exe "zip -r -9 -y '../zips/#{$config['zip_prefix']}_l10n_#{lang}_#{Time.now.strftime('%Y%m%d_%H%M')}.zip' *"
      error "Failed to pack resources for '#{lang}'" unless rc
    end
  end
end

def push_tmp_lproj
  FileUtils.mv Dir.glob(File.join($config['tmp_dir'], 'zips', '*.zip')), $config['products_folder'], :verbose => true
end

main
exit 0
